:root {
  --headings-font-family: "PP Stellar", var(--font-sans);
  --text-font-family: "IBM Plex Serif", var(--font-serif);
  --text-color: light-dark(black, white);
  --background: light-dark(white, black);
  --logo-color: var(--text-color);
  --primary-color: oklch(63.4% 0.216 24.886);

  --underscore-color: var(--primary-color);

  /* layout measures */
  --root: clamp(max(1em, 20px), 1.2em + 0.5vw, 2em);
  --line-height: 1.5;
  --smaller: 0.8em;
  --line: calc(1rem * var(--line-height));
  --measure: 60ch;
  --gap: 1rem;
  --half-gap: calc(var(--gap) / 2);
  --shim: calc(var(--gap) / 4);
  --half-shim: calc(var(--shim) / 2);
  --spacer: clamp(
    var(--gap) * 1.5,
    var(--gap) + 4vw,
    min(var(--gap) * 6, 20vmin)
  );

  @media (prefers-reduced-motion: no-preference) {
    animation: --underscore 1060ms infinite ease-in-out;
  }

  font-size: 100%;
  color-scheme: light dark;
  accent-color: var(--primary-color);
  interpolate-size: allow-keywords;
}

body {
  font-family: var(--text-font-family);
  font-variant-ligatures: common-ligatures;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: geometricPrecision;

  color: var(--text-color);
  background-color: var(--background);
}

h1, h2, h3, h4, h5 {
  font-weight: 700;
  text-transform: uppercase;
  text-wrap: balance;
}
:is(h1, h2, h3, h4, h5) b {
  color: var(--primary-color);
}

p, ul, ol, dl {
  text-wrap: pretty;
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--headings-font-family);
  letter-spacing: var(--font-letterspacing-0);
}

h1 {
  font-size: var(--font-size-fluid-3);
}

h2 {
  font-size: var(--font-size-fluid-2);
}

h3 {
  font-size: var(--font-size-fluid-1);
}

hgroup h1 {
  margin: 0;
}

hgroup h1 em {
  font-style: normal;
  font-weight: 300;
}

hgroup h2 {
  margin-block-start: 0;
}

main > section {
  margin-block: 4em;
  margin-inline: 0;
}

section h2 {
  margin-inline-start: calc(-1 * (1ex + 2px));

  &::before {
    content: "_";
    color: var(--underscore-color);
  }
}

blockquote dt {
  font-size: var(--font-size-fluid-1);
  font-weight: 600;
}

blockquote dd {
  font-family: Gergia, var(--font-serif);
}

/* layout */

html {
  --margin: var(--gap, 1em);
  --inset: var(--gap, 1em);
  --outset: 0px;
}

@media (min-width: 40em) {
  html {
    --margin: var(--spacer, 2em);
    --outset: calc(var(--inset) * -1);
  }
}

html, body {
  margin: 0;
}

body {
  --wide: 100vw - 30em;

  display: grid;
  row-gap: var(--spacer);
  grid-template-columns:
    [full-start] var(--margin)
    [page-start] minmax(0, 0.5fr)
    [extra-start] minmax(0, 1fr)
    [wide-start] minmax(0, clamp(0px, var(--wide), var(--spacer, 3em)))
    [main-start] minmax(12ch, var(--measure))
    [main-end] minmax(0, clamp(0px, var(--wide), var(--gap, 1em)))
    [wide-end] minmax(0, 1fr)
    [extra-end] minmax(0, 0.5fr)
    [page-end] var(--margin)
    [full-end];
}

:where(body) > * {
  grid-column: var(--body-column, wide);
  margin-block: 0;
}

@media (max-width: 30em) {
  body {
    overflow-wrap: break-word;
  }
}

body > header {
  --body-column: page;
  display: grid;
  grid-template-columns: subgrid;

  .claim {
    grid-area: wide;
    font-size: var(--size-fluid-4);
    font-weight: 300;
    font-family: var(--headings-font-family);
    text-transform: uppercase;
    text-wrap: balance;
  }
  .claim strong {
    position: relative;
  }
  .claim strong::after {
    content: "";
    position: absolute;
    inset: 0;
    background-image: asset-url("images", "underline.svg");
    background-repeat: no-repeat;
  }
}

body > main {
  --body-column: full;
  --spacer: 1rem;
  display: grid;
  row-gap: var(--spacer);
  grid: inherit;
  padding-block: 0;

  & > * {
    grid-column: var(--main-column, main);
    margin-block: 0;
  }
}

body > footer {
  --body-column: extra;
  display: grid;
  grid: inherit;
  & >  * {
    grid-column: var(--footer-column, page);
  }
  hgroup {
    display: flex;
    gap: var(--gap);
    align-items: baseline;

    & > * {
      margin: 0;
    }
  }
}

@keyframes --underscore {
  from { --underscore-color: var(--primary-color); }
  to { --underscore-color: transparent; }
}
